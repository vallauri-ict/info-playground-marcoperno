var qs = require('querystring');
const util = require('util');
let mysql = require('mysql');
const { json } = require('express');

const campiPrenotazione = ["id", "cliente_persona_id", "data", "negozio_id", "ora", "servita", "volontario_persona_id"]

const users = [];

//#region GESTIONE AUTENTICAZIONE

function login(req, res) {
    let record = req.body;
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT nome, cognome, tipo " +
        "FROM persona, tipopersona " +
        "WHERE email=" + con.escape(record.email) + " AND pwd =" + con.escape(record.pwd) + " AND tipopersona_id = tipopersona.id";
    console.log(query);
    con.query(query, function (err, result, fields) {
        if (err) {
            console.log('err');
        }
        else {
            console.log(JSON.stringify(result));
            if (result.length != 0 && result[0].tipo != "cliente") {
                console.log('si')
                req.session.email = record.email;
                req.session.tipo = result[0].tipo;
                res.writeHead(200);
                res.write(result[0].tipo);
                res.end();
            }
            else {

                console.log('no');
                res.writeHead(401, { "Content-Type": "application/json" });
                res.write("Email o password non corretti oppure non sei autorizzato");
                res.end();
            }
        }
    });
}

function logout(req, res) {
    req.session.destroy(function () {
        //res.writeHead(200, { "Content-Type": "application/json" });
        res.write("Logout corretto");
        res.end();
    });
}

//#endregion

//#region GESTIONE PRENOTAZIONE

function prenotazioneIndex(req, res) {
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT  * FROM prenotazione";
    console.log(query);
    con.query(query, async function (err, result, fields) {
        res.writeHead(200, { "Content-Type": "application/json" });
        for (let i = 0; i < result.length; i++) {
            console.log(JSON.stringify(result[i]));
            result[i]["cliente_persona_email"] = await convertPersona_IdToEmail(result[i]["cliente_persona_id"], con);
            result[i]["volontario_persona_email"] = await convertPersona_IdToEmail(result[i]["volontario_persona_id"], con);
            result[i]["negozio_nome"] = await convertIdToNomeNegozio(result[i]["negozio_id"], con)
            //converto la data correttamente
            let data = String(result[i]["data"]).substring(0, 15);
            var date = new Date(data);
            var dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];

            result[i]["data"] = dateString;
            delete result[i]["cliente_persona_id"];
            delete result[i]["volontario_persona_id"];
            delete result[i]["negozio_id"];
            console.log(result[i]["cliente_persona_id"]);

        }

        console.log(JSON.stringify(result));
        res.write(JSON.stringify(result));
        res.end();
    });
}

async function prenotazioneStore(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let controlloCitta = await convertNomeNegozioToId(obj["negozio_nome"], con);
        if (controlloCitta != -1) {
            obj["negozio_id"] = controlloCitta;
            delete obj["negozio_nome"];

            let ris;
            ris = await convertEmailToPersona_Id(obj["cliente_persona_email"], con);
            if (ris.id != '-1' && ris.tipo == 'cliente') {
                obj["cliente_persona_id"] = ris.id;

                ris = await convertEmailToPersona_Id(obj["volontario_persona_email"], con);
                if (ris.id != '-1' && ris.tipo == 'volontario') {
                    obj["volontario_persona_id"] = ris.id;

                    delete obj["cliente_persona_email"];
                    delete obj["volontario_persona_email"];

                    let query = "INSERT INTO prenotazione (cliente_persona_id, negozio_id, data, ora, volontario_persona_id, servita)" +
                        " VALUES (" + con.escape(obj["cliente_persona_id"]) + ", " + con.escape(obj["negozio_id"]) + "," +
                        " " + con.escape(obj["data"]) + ", " + con.escape(obj["ora"]) + "," +
                        " " + con.escape(obj["volontario_persona_id"]) + ", '0'); ";

                    console.log(query);

                    con.query(query, async function (err, result, fields) {
                        res.writeHead(200, { "Content-Type": "application/json" });
                        console.log(JSON.stringify(result));
                        res.write(JSON.stringify(result));
                        res.end();
                    });
                }
                else {
                    throw new Error({ "err": "param errati" });
                }

            }
            else {
                throw new Error({ "err": "param errati" });
            }
        }
        else {
            throw new Error({ "err": "param errati" });
        }


    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

async function prenotazioneUpdate(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let controlloCitta = await convertNomeNegozioToId(obj["negozio_nome"], con);
        if (controlloCitta != -1) {
            obj["negozio_id"] = controlloCitta;
            delete obj["negozio_nome"];

            let ris;
            ris = await convertEmailToPersona_Id(obj["cliente_persona_email"], con);
            if (ris.id != '-1' && ris.tipo == 'cliente') {
                obj["cliente_persona_id"] = ris.id;

                ris = await convertEmailToPersona_Id(obj["volontario_persona_email"], con);
                if (ris.id != '-1' && ris.tipo == 'volontario') {
                    obj["volontario_persona_id"] = ris.id;

                    delete obj["cliente_persona_email"];
                    delete obj["volontario_persona_email"];

                    let query = "UPDATE prenotazione SET ";
                    Object.keys(obj).forEach(function (element, index) {
                        /////////////////////
                        //N.B. LA SOLUZIONE USANDO IL FOREACH E' STATA FATTA PERCHE' POTREBBE SUCCEDERE CHE IN ALTRI SERVIZI SI VOGLIA SOLO MODIFICARE QUALCHE CAMPO
                        //DI CONSEGUENZA COSTRUENDOSI LA QUERY IN BASE AI CAMPI DA MODIFICARE DESIDERATI DAL CLIENT RENDE QUESTA SOLUZIONE PIU' VERSATILE
                        ////////////////////////
                        if (element != 'id') {
                            let i = 0;

                            while (campiPrenotazione[i] != element && i != campiPrenotazione.length)
                                i++

                            if (i != campiPrenotazione.length)
                                query += element + " = " + con.escape(obj[element]) + ", ";
                            else
                                throw new Error({ "err": "param errati" });
                        }

                    });
                    query = query.slice(0, query.length - 2);
                    console.log(query);
                    query += " WHERE id = " + con.escape(obj['id']);
                    con.query(query, async function (err, result, fields) {
                        res.writeHead(200, { "Content-Type": "application/json" });

                        console.log(JSON.stringify(result));
                        res.write(JSON.stringify(result));
                        res.end();
                    });
                }
                else {
                    throw new Error({ "err": "param errati" });
                }

            }
            else {
                throw new Error({ "err": "param errati" });
            }
        }
        else {
            throw new Error({ "err": "param errati" });
        }


    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }

}

function prenotazioneDestroy(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let query = "DELETE FROM prenotazione WHERE id = " + con.escape(obj['id']);
        console.log(query);
        con.query(query, async function (err, result, fields) {
            res.writeHead(200, { "Content-Type": "application/json" });
            console.log("Record eliminato");
            res.write(JSON.stringify(result));
            res.end();
        });
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        console.log("Errore");
        res.write(JSON.stringify(result));
        res.end();
    }

}

//#endregion

//#region CONVERTER
async function convertPersona_IdToEmail(persona_id, con) {
    try {
        return new Promise((resolve, reject) => {
            con.query("SELECT email FROM persona WHERE id =" + con.escape(persona_id), (err, resp) => {
                if (err) {
                    reject(err)
                } else {
                    if (resp.length == 0) {
                        resolve('-1');
                    }
                    else
                        resolve(resp[0].email);

                }
            })
        });
    } catch (error) {
        throw new Error();
    }
}

async function convertEmailToPersona_Id(email, con) {
    return new Promise((resolve, reject) => {
        con.query("SELECT persona.id, tipo FROM persona, tipopersona WHERE email =" + con.escape(email) + " AND tipopersona_id = tipopersona.id", (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    ris.id = -1;
                    ris.tipo = -1;
                    //resolve('-1');
                }
                else {
                    //resolve(resp[0].id);
                    ris.id = resp[0].id;
                    ris.tipo = resp[0].tipo;
                }
                resolve(ris);

            }
        })

    });

}

async function convertIdToNomeNegozio(id, con) {
    return new Promise((resolve, reject) => {

        con.query("SELECT nome FROM negozio WHERE id = " + con.escape(id), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    resolve(-1);
                    //resolve('-1');
                }
                else {
                    //resolve(resp[0].id);
                    resolve(resp[0].nome);
                }


            }
        })

    });

}

async function convertNomeNegozioToId(nome, con) {
    return new Promise((resolve, reject) => {
        let x = "SELECT id FROM negozio WHERE nome = " + con.escape(nome);
        console.log(x);
        con.query("SELECT id FROM negozio WHERE nome = " + con.escape(nome), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    //ris.id = -1;
                    resolve('-1');
                }
                else {
                    resolve(resp[0].id);
                    // ris.id = resp[0].id;
                }

            }
        })

    });

}

//#endregion

module.exports.login = login;
module.exports.logout = logout;
module.exports.prenotazioneIndex = prenotazioneIndex;
module.exports.prenotazioneUpdate = prenotazioneUpdate;
module.exports.prenotazioneDestroy = prenotazioneDestroy;
module.exports.prenotazioneStore = prenotazioneStore;
