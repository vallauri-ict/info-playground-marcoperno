var qs = require('querystring');
const util = require('util');
let mysql = require('mysql');
const { json } = require('express');

const campiPrenotazione = ["id", "cliente_persona_id", "data", "negozio_id", "ora", "servita", "volontario_persona_id"]

const users = [];

function login(req, res) {
    let record = req.body;
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT nome, cognome, tipo " +
        "FROM persona, tipopersona " +
        "WHERE email=" + con.escape(record.email) + " AND pwd =" + con.escape(record.pwd) + " AND tipopersona_id = tipopersona.id";
    console.log(query);
    con.query(query, function (err, result, fields) {
        if (err) {
            console.log('err');
        }
        else {
            console.log(JSON.stringify(result));
            if (result.length != 0 && result[0].tipo != "cliente") {
                console.log('si')
                req.session.email = record.email;
                req.session.tipo = result[0].tipo;
                res.writeHead(200);
                res.write(result[0].tipo);
                res.end();
            }
            else {

                console.log('no');
                res.writeHead(401, { "Content-Type": "application/json" });
                res.write("Email o password non corretti oppure non sei autorizzato");
                res.end();
            }
        }
    });
}

function logout(req, res) {
    req.session.destroy(function () {
        //res.writeHead(200, { "Content-Type": "application/json" });
        res.write("Logout corretto");
        res.end();
    });
}

function prenotazioneIndex(req, res) {
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT  * FROM prenotazione";
    console.log(query);
    con.query(query, async function (err, result, fields) {
        res.writeHead(200, { "Content-Type": "application/json" });
        for (let i = 0; i < result.length; i++) {
            console.log(JSON.stringify(result[i]));
            result[i]["cliente_persona_email"] = await convertPersona_IdToEmail(result[i]["cliente_persona_id"], con);
            result[i]["volontario_persona_email"] = await convertPersona_IdToEmail(result[i]["volontario_persona_id"], con);

            //converto la data correttamente
            let data = String(result[i]["data"]).substring(0, 15);
            var date = new Date(data);
            var dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];

            result[i]["data"] = dateString;
            delete result[i]["cliente_persona_id"];
            delete result[i]["volontario_persona_id"]
            console.log(result[i]["cliente_persona_id"]);

        }

        console.log(JSON.stringify(result));
        res.write(JSON.stringify(result));
        res.end();
    });
}

async function prenotazioneUpdate(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let ris;
        ris = await convertEmailToPersona_Id(obj["cliente_persona_email"], con);
        if (ris != -1) {
            obj["cliente_persona_id"] = ris;

            ris = await convertEmailToPersona_Id(obj["volontario_persona_email"], con);
            if (ris != -1) {
                obj["volontario_persona_id"] = ris;

                delete obj["cliente_persona_email"];
                delete obj["volontario_persona_email"];

                let query = "UPDATE prenotazione SET ";
                Object.keys(obj).forEach(function (element, index) {
                    /////////////////////
                    //Se faccio con.escape sul nome del campo vengono aggiunti gli apici e la query non funziona
                    //allora ho creato un'array con i nome dei campi che possono essere accettati
                    ////////////////////////
                    if (element != 'id') {
                        let i = 0;

                        while (campiPrenotazione[i] != element && i != campiPrenotazione.length)
                            i++

                        if (i != campiPrenotazione.length)
                            query += element + " = " + con.escape(obj[element]) + ", ";
                        else
                            throw new Error({"err":"param errati"});
                    }

                });
                query = query.slice(0, query.length - 2);
                console.log(query);
                query += " WHERE id = " + con.escape(obj['id']);
                con.query(query, async function (err, result, fields) {
                    res.writeHead(200, { "Content-Type": "application/json" });

                    console.log(JSON.stringify(result));
                    res.write(JSON.stringify(result));
                    res.end();
                });
            }
            else
            {
                throw new Error({"err":"param errati"});
            }

        }
        else
        {
            throw new Error({"err":"param errati"});
        }

    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }

}

function prenotazioneDestroy(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });
    
        let obj = req.body;
    
        let query = "DELETE FROM prenotazione WHERE id = "+con.escape(obj['id']);
        console.log(query);
        con.query(query, async function (err, result, fields) {
            res.writeHead(200, { "Content-Type": "application/json" });
            console.log("Record eliminato");
            res.write(JSON.stringify(result));
            res.end();
        });
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        console.log("Errore");
        res.write(JSON.stringify(result));
        res.end();
    }
    
}

async function convertPersona_IdToEmail(persona_id, con) {
    try {
        return new Promise((resolve, reject) => {
            con.query("SELECT email FROM persona WHERE id =" + con.escape(persona_id), (err, resp) => {
                if (err) {
                    reject(err)
                } else {
                    if (resp.length == 0) {
                        resolve('-1');
                    }
                    else
                        resolve(resp[0].email);

                }
            })
        });
    } catch (error) {
        throw new Error();
    }
}

async function convertEmailToPersona_Id(email, con) {
    return new Promise((resolve, reject) => {
        con.query("SELECT id FROM persona WHERE email =" + con.escape(email), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                if (resp.length == 0) {
                    resolve('-1');
                }
                else
                    resolve(resp[0].id);
            }
        })

    });

}

module.exports.login = login;
module.exports.logout = logout;
module.exports.prenotazioneIndex = prenotazioneIndex;
module.exports.prenotazioneUpdate = prenotazioneUpdate;
module.exports.prenotazioneDestroy = prenotazioneDestroy;
