var qs = require('querystring');
const util = require('util');
let mysql = require('mysql');
const { json } = require('express');

const campiPrenotazione = ["id", "cliente_persona_id", "data", "negozio_id", "ora", "servita", "volontario_persona_id"];
const campiNegozio = ["id", "nome", "indirizzo"]
const campiPersona = ["id", "nome", "cognome", "indirizzo", "tipopersona_id", "pwd", "email"]

const users = [];

//#region GESTIONE AUTENTICAZIONE

function login(req, res) {
    let record = req.body;
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT persona.id, nome, cognome, tipo " +
        "FROM persona, tipopersona " +
        "WHERE email=" + con.escape(record.email) + " AND pwd =" + con.escape(record.pwd) + " AND tipopersona_id = tipopersona.id";
    console.log(query);
    con.query(query, function (err, result, fields) {
        if (err) {
            console.log('err');
        }
        else {
            console.log(JSON.stringify(result));
            if (result.length != 0 && result[0].tipo != "cliente") {
                console.log('si')
                req.session.email = record.email;
                record.pwd = "";
                req.session.persona_id = result[0].id;
                req.session.tipo = result[0].tipo;
                res.writeHead(200, { "Content-Type": "application/json" });
                let vet = {};
                vet.tipo = req.session.tipo
                res.write(JSON.stringify(vet));
                res.end();
            }
            else {

                console.log('no');
                res.writeHead(401);
                res.write("Email o password non corretti oppure non sei autorizzato");
                res.end();
            }
        }
    });
}

function logout(req, res) {
    req.session.destroy(function () {
        //res.writeHead(200, { "Content-Type": "application/json" });
        res.write("Logout corretto");
        res.end();
    });
}

//#endregion

//#region GESTIONE PRENOTAZIONE

//////////////
//prenotazioneIndex restituisce tutte le prenotazione, mentre prenotazioniShow restituisce le prenotazione di un volontario
/////////
//index visualizza tutte le prenotazioni
function prenotazioneIndex(req, res) {
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT  * FROM prenotazione ORDER by data DESC";
    console.log(query);
    con.query(query, async function (err, result, fields) {
        res.writeHead(200, { "Content-Type": "application/json" });
        for (let i = 0; i < result.length; i++) {
            console.log(JSON.stringify(result[i]));
            result[i]["cliente_persona_email"] = await convertPersona_IdToEmail(result[i]["cliente_persona_id"], con);
            result[i]["volontario_persona_email"] = await convertPersona_IdToEmail(result[i]["volontario_persona_id"], con);
            result[i]["negozio_nome"] = await convertIdToNomeNegozio(result[i]["negozio_id"], con)
            //converto la data correttamente
            let data = String(result[i]["data"]).substring(0, 15);
            var date = new Date(data);
            var dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];

            result[i]["data"] = dateString;
            delete result[i]["cliente_persona_id"];
            delete result[i]["volontario_persona_id"];
            delete result[i]["negozio_id"];
            console.log(result[i]["cliente_persona_id"]);

        }

        console.log(JSON.stringify(result));
        res.write(JSON.stringify(result));
        res.end();
    });
}
//show solo alcuni a seconda del volontario
function prenotazioneShow(req, res) {
    let con = mysql.createConnection({
        host: "localhost",
        user: "root",
        password: "",
        database: "consegna_spesa"
    });

    let query = "SELECT  * FROM prenotazione WHERE volontario_persona_id = " + con.escape(req.session.persona_id) + " ORDER by data DESC";
    console.log(query);
    con.query(query, async function (err, result, fields) {
        res.writeHead(200, { "Content-Type": "application/json" });
        for (let i = 0; i < result.length; i++) {
            console.log(JSON.stringify(result[i]));
            result[i]["cliente_persona_email"] = await convertPersona_IdToEmail(result[i]["cliente_persona_id"], con);
            result[i]["volontario_persona_email"] = await convertPersona_IdToEmail(result[i]["volontario_persona_id"], con);
            result[i]["negozio_nome"] = await convertIdToNomeNegozio(result[i]["negozio_id"], con)
            //converto la data correttamente
            let data = String(result[i]["data"]).substring(0, 15);
            var date = new Date(data);
            var dateString = new Date(date.getTime() - (date.getTimezoneOffset() * 60000))
                .toISOString()
                .split("T")[0];

            result[i]["data"] = dateString;
            delete result[i]["cliente_persona_id"];
            delete result[i]["volontario_persona_id"];
            delete result[i]["negozio_id"];
            console.log(result[i]["cliente_persona_id"]);

        }

        console.log(JSON.stringify(result));
        res.write(JSON.stringify(result));
        res.end();
    });
}

async function prenotazioneStore(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let controlloNegozio = await convertNomeNegozioToId(obj["negozio_nome"], con);
        if (controlloNegozio.id != -1) {
            obj["negozio_id"] = controlloNegozio.id;
            delete obj["negozio_nome"];

            let ris;
            ris = await convertEmailToPersona_Id(obj["cliente_persona_email"], con);
            if (ris.id != '-1' && ris.tipo == 'cliente') {
                obj["cliente_persona_id"] = ris.id;

                ris = await convertEmailToPersona_Id(obj["volontario_persona_email"], con);
                if (ris.id != '-1' && ris.tipo == 'volontario') {
                    obj["volontario_persona_id"] = ris.id;

                    delete obj["cliente_persona_email"];
                    delete obj["volontario_persona_email"];

                    obj["servita"] = 0;

                    let query = creaInsert("prenotazione", campiPrenotazione, obj, con);

                    con.query(query, async function (err, result, fields) {
                        if (err) {
                            res.writeHead(400);
                            res.write("Errore nell'inserimento dei dati");
                            res.end();
                        }
                        else {
                            res.writeHead(200);
                            console.log(JSON.stringify(result));
                            res.write("inserito");
                            res.end();
                        }
                    });
                }
                else {
                    throw new Error({ "err": "param errati" });
                }

            }
            else {
                throw new Error({ "err": "param errati" });
            }
        }
        else {
            throw new Error({ "err": "param errati" });
        }


    } catch (error) {
        res.writeHead(400);
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

//////////
//QUESTA UPDATE E' USATA SIA DA SEGRETERIA SIA DA VOLONTARIO
/////////
async function prenotazioneUpdate(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        if (obj["negozio_nome"]) {
            let controlloNegozio = await convertNomeNegozioToId(obj["negozio_nome"], con);
            if (controlloNegozio.id != -1) {
                obj["negozio_id"] = controlloNegozio.id;
                delete obj["negozio_nome"];
            }
            else {
                throw new Error({ "err": "param errati" });
            }

        }

        let ris;

        if (obj["cliente_persona_email"]) {
            ris = await convertEmailToPersona_Id(obj["cliente_persona_email"], con);
            if (ris.id != '-1' && ris.tipo == 'cliente') {
                obj["cliente_persona_id"] = ris.id;
                delete obj["cliente_persona_email"];
            }
            else {
                throw new Error({ "err": "param errati" });
            }
        }

        if (obj["volontario_persona_email"]) {
            ris = await convertEmailToPersona_Id(obj["volontario_persona_email"], con);
            if (ris.id != '-1' && ris.tipo == 'volontario') {
                obj["volontario_persona_id"] = ris.id;
                delete obj["volontario_persona_email"];
            }
            else {
                throw new Error({ "err": "param errati" });
            }
        }

        if (req.session.tipo == "segreteria") {

            let query = creaUpdate("prenotazione", campiPrenotazione, obj, con);

            con.query(query, async function (err, result, fields) {
                if (err) {
                    res.writeHead(400);
                    res.write("Errore nell'inserimento dei dati");
                    res.end();
                }
                else {
                    res.writeHead(200);
                    console.log(JSON.stringify(result));
                    res.write("Aggiornato");
                    res.end();
                }

            });
        }
        else {
            let query = "UPDATE prenotazione SET servita = " + con.escape(obj["servita"]) + " WHERE id = " + con.escape(obj["id"]) + " AND volontario_persona_id  = " + con.escape(req.session.persona_id);//ulteriore controllo per verificare che sia effettivamente un record di quel volontario
            console.log(query);
            con.query(query, async function (err, result, fields) {
                if (err) {
                    res.writeHead(400);
                    res.write("Errore nell'inserimento dei dati");
                    res.end();
                }
                else {
                    res.writeHead(200);
                    console.log(JSON.stringify(result));
                    res.write("aggiornato");
                    res.end();
                }

            });
        }


    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }

}

function prenotazioneDestroy(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let query = "DELETE FROM prenotazione WHERE id = " + con.escape(obj['id']);
        console.log(query);
        con.query(query, async function (err, result, fields) {
            if (err) {
                res.writeHead(400);
                res.write("Errore nell'inserimento dei dati");
                res.end();
            }
            else {
                res.writeHead(200);
                console.log("Record eliminato");
                res.write("Record eliminato");
                res.end();
            }
        });
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        console.log("Errore");
        res.write("Errore");
        res.end();
    }

}

//#endregion

//#region GESTIONE PERSONA

async function personaStore(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let ris;
        ris = await convertTipopersona_TipoToId(obj["tipopersona_tipo"], con);
        if (ris.id != '-1') {
            obj["tipopersona_id"] = ris.id;

            delete obj["tipopersona_tipo"];



            if (ris.tipo == "cliente") {
                obj["pwd"] = "null";
            }

            let query = creaInsert("persona", campiPersona, obj, con);

            con.query(query, async function (err, result, fields) {
                if (err) {
                    res.writeHead(400);
                    res.write("Errore nell'inserimento dei dati");
                    res.end();
                }
                else {
                    res.writeHead(200);
                    console.log(JSON.stringify(result));
                    res.write("Aggiunta");
                    res.end();
                }

            });
        }
        else {
            throw new Error({ "err": "param errati" });
        }


    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

async function personaUpdate(req, res) { 
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });
    
        let obj = req.body;
    
        ris = await convertTipopersona_TipoToId(obj["tipopersona_tipo"], con);
        if (ris.id != '-1') {
            obj["tipopersona_id"] = ris.id;
            if( obj["tipopersona_tipo"] == "cliente" )
                obj["pwd"]= null;
            delete obj["tipopersona_tipo"];
        }
        else {
            throw new Error({ "err": "param errati" });
        }
        
        ris = await convertEmailToPersona_Id(obj["email"], con);

        if (ris.id != '-1') {
            obj["id"] = ris.id;
        }
        else {
            throw new Error({ "err": "param errati" });
        }

        let query = creaUpdate("persona", campiPersona, obj, con);
    
        con.query(query, async function (err, result, fields) {
            if (err) {
                res.writeHead(400);
                res.write("Errore nell'inserimento dei dati");
                res.end();
            }
            else {
                res.writeHead(200);
                console.log(JSON.stringify(result));
                res.write("aggiornato");
                res.end();
            }
    
        });
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

async function personaDestroy(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        ris = await convertEmailToPersona_Id(obj["email"], con);

        if (ris.id != '-1') {
            obj["id"] = ris.id;
        }
        else {
            throw new Error({ "err": "param errati" });
        }
        //Con questa gestione non vengono eliminate le prenotazioni annese per il fatto di avere uno storico anche se non si può più risalire alla mail
        con.query("SET foreign_key_checks = 0;", async function (err, result, fields) {
            let query = "DELETE FROM persona WHERE id = " + con.escape(obj['id']);
            console.log(query);
            con.query(query, async function (err, result, fields) {
                if (err) {
                    res.writeHead(400);
                    res.write("Errore nell'inserimento dei dati");
                }
                else {
                    res.writeHead(200);
                    console.log("Record eliminato");
                    res.write("Record eliminato");
                }
                con.query("SET foreign_key_checks = 1;", async function (err, result, fields) {
                    res.end();
                })

            });
        })

        
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        console.log("Errore");
        res.write("Errore");
        res.end();
    }

}
//#endregion

//#region GESTIONE NEGOZIO

function negozioStore(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        let query = creaInsert("negozio", campiNegozio, obj, con)
        /*let query = "INSERT INTO negozio ( nome, indirizzo) VALUES ( "+con.escape(obj["nome"])+", "+con.escape(obj["indirizzo"])+");";

        console.log(query);*/

        con.query(query, async function (err, result, fields) {
            if (err) {
                res.writeHead(400);
                res.write("Errore nell'inserimento dei dati");
                res.end();
            }
            else {
                res.writeHead(200);
                console.log(JSON.stringify(result));
                res.write("Aggiunto");
                res.end();
            }

        });


    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

async function negozioUpdate (req, res) { 
    try {

        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });
    
        let obj = req.body;

        let controlloNegozio = await convertNomeNegozioToId(obj["nome"], con);
        
        if (controlloNegozio.id != -1) {
            obj["id"] = controlloNegozio.id;
        }
        else {
            throw new Error({ "err": "param errati" });
        }

        let query = creaUpdate("negozio", campiNegozio, obj, con);
    
        con.query(query, async function (err, result, fields) {
            if (err) {
                res.writeHead(400);
                res.write("Errore nell'inserimento dei dati");
                res.end();
            }
            else {
                res.writeHead(200);
                console.log(JSON.stringify(result));
                res.write("aggiornato");
                res.end();
            }

        });
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        res.write("Errore nell'inserimento dei dati");
        res.end();
    }
}

async function negozioDestroy(req, res) {
    try {
        let con = mysql.createConnection({
            host: "localhost",
            user: "root",
            password: "",
            database: "consegna_spesa"
        });

        let obj = req.body;

        ris = await convertNomeNegozioToId(obj["nome"], con);

        if (ris.id != '-1') {
            obj["id"] = ris.id;
        }
        else {
            throw new Error({ "err": "param errati" });
        }

        con.query("SET foreign_key_checks = 0;", async function (err, result, fields) {
            let query = "DELETE FROM negozio WHERE id = " + con.escape(obj['id']);
            console.log(query);
            con.query(query, async function (err, result, fields) {
                if (err) {
                    res.writeHead(400);
                    res.write("Errore nell'inserimento dei dati");
                }
                else {
                    res.writeHead(200);
                    console.log("Record eliminato");
                    res.write("Record eliminato");
                }
                con.query("SET foreign_key_checks = 1;", async function (err, result, fields) {
                    res.end();
                })
            });
            
        })
        
    } catch (error) {
        res.writeHead(400, { "Content-Type": "application/json" });
        console.log("Errore");
        res.write("Errore");
        res.end();
    }

}
//#endregion

//#region CONVERTER
async function convertPersona_IdToEmail(persona_id, con) {
    try {
        return new Promise((resolve, reject) => {
            con.query("SELECT email FROM persona WHERE id =" + con.escape(persona_id), (err, resp) => {
                if (err) {
                    reject(err)
                } else {
                    if (resp.length == 0) {
                        resolve('-1');
                    }
                    else
                        resolve(resp[0].email);

                }
            })
        });
    } catch (error) {
        throw new Error();
    }
}

async function convertEmailToPersona_Id(email, con) {
    return new Promise((resolve, reject) => {
        con.query("SELECT persona.id, tipo FROM persona, tipopersona WHERE email =" + con.escape(email) + " AND tipopersona_id = tipopersona.id", (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    ris.id = -1;
                    ris.tipo = -1;
                    //resolve('-1');
                }
                else {
                    //resolve(resp[0].id);
                    ris.id = resp[0].id;
                    ris.tipo = resp[0].tipo;
                }
                resolve(ris);

            }
        })

    });

}

async function convertIdToNomeNegozio(id, con) {
    return new Promise((resolve, reject) => {

        con.query("SELECT nome FROM negozio WHERE id = " + con.escape(id), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    resolve(-1);
                    //resolve('-1');
                }
                else {
                    //resolve(resp[0].id);
                    resolve(resp[0].nome);
                }


            }
        })

    });

}

async function convertNomeNegozioToId(nome, con) {
    return new Promise((resolve, reject) => {
        let x = "SELECT id FROM negozio WHERE nome = " + con.escape(nome);
        console.log(x);
        con.query("SELECT id FROM negozio WHERE nome = " + con.escape(nome), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    ris.id = -1;
                }
                else {
                    ris.id = resp[0].id;
                }
                resolve(ris);

            }
        })

    });

}

function convertTipopersona_TipoToId(tipopersona, con) {
    return new Promise((resolve, reject) => {
        con.query("SELECT id, tipo FROM tipopersona WHERE tipo =" + con.escape(tipopersona), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    ris.id = -1;
                    ris.tipo = -1;
                    //resolve('-1');
                }
                else {
                    //resolve(resp[0].id);
                    ris.id = resp[0].id;
                    ris.tipo = resp[0].tipo;
                }
                resolve(ris);

            }
        })

    });
}


function convertIdToTipopersona_tipo(id, con) {
    return new Promise((resolve, reject) => {
        con.query("SELECT id, tipo FROM tipopersona WHERE id =" + con.escape(id), (err, resp) => {
            if (err) {
                reject(err)
            } else {
                let ris = {};
                if (resp.length == 0) {
                    ris.id = -1;
                    ris.tipo = -1;
                }
                else {
                    ris.id = resp[0].id;
                    ris.tipo = resp[0].tipo;
                }
                resolve(ris);

            }
        })

    });
}

//#endregion

function creaInsert(nomeTabella, campi, dati, con) {
    let query = "INSERT INTO " + nomeTabella + " ( ";
    campi.forEach(function (element, index) {
        if (element != "id")
            query += element + ", ";
    });

    query = query.slice(0, query.length - 2);
    query += " ) VALUES ( ";

    campi.forEach(function (element, index) {
        if (element != "id")
            query += con.escape(dati[element]) + ", ";
    });

    query = query.slice(0, query.length - 2);
    query += " );"

    console.log(query)

    return query;
}

function creaUpdate(nomeTabella, campi, dati, con) {
    try {
        let query = "UPDATE " + nomeTabella + " SET ";
        
        Object.keys(dati).forEach(function (element, index) {
            if (element != 'id') {
                let i = 0;

                while (campi[i] != element && i != campi.length)
                    i++

                if (i != campi.length)
                    query += element + " = " + con.escape(dati[element]) + ", ";
                else
                    throw new Error({ "err": "param errati" });
            }
        });

        query = query.slice(0, query.length - 2);
        query += " WHERE id = " + con.escape(dati['id']);

        console.log(query);

        return query;

    } catch (error) {
        throw new Error({ "err": "param errati" });
    }
}

module.exports.login = login;
module.exports.logout = logout;
module.exports.prenotazioneIndex = prenotazioneIndex;
module.exports.prenotazioneShow = prenotazioneShow;
module.exports.prenotazioneUpdate = prenotazioneUpdate;
module.exports.prenotazioneDestroy = prenotazioneDestroy;
module.exports.prenotazioneStore = prenotazioneStore;
module.exports.personaStore = personaStore;
module.exports.personaUpdate = personaUpdate;
module.exports.personaDestroy = personaDestroy;
module.exports.negozioStore = negozioStore;
module.exports.negozioUpdate = negozioUpdate;
module.exports.negozioDestroy = negozioDestroy;
