let mongo = require("mongodb")
let mongoClient = mongo.MongoClient;

let url = "mongodb://localhost:27017/";

//#region GESTIONE AUTENTICAZIONE

module.exports.login = async (req, res) => {
    let obj = req.body;
    let user = await letturaDb("Es07", "user", {email: obj.email, password: obj.password}, {});
    
    if (user[0] != null) {
        req.session._id = user[0]._id;
        res.send("Login effettuato")
        res.end();
    } else {
        res.writeHead(401);
        res.write("Login errato");
        res.end();
    }
}

module.exports.getTitoli = async (req, res) => {
    let obj = req.query;
    let titoli;

    if(obj.titolo  != undefined) {
        var regex = new RegExp(`.*${obj.titolo}.*`, 'gi')
        //var regex =new RegExp('/.*' +obj.titolo+'.*/i', 'g')
        titoli =await letturaDb("Es07", "borsa", {titolo: {$regex :  regex}}, {denaro:0, lettera:0, volumi:0});
    }
    else {
        titoli =await letturaDb("Es07", "borsa", {}, {denaro:0, lettera:0, volumi:0});
    }
    
    res.send(JSON.stringify(titoli))
    res.end();
}


module.exports.infoTitolo = async (req, res) => {
    let obj = req.query;
    let titoli;

    if(obj._id  != undefined) {
        titoli =await letturaDb("Es07", "borsa", {_id:obj._id}, {});
        res.send(JSON.stringify(titoli))
        res.end();
    }
    else {
        res.writeHead(401);
        res.write("Err");
        res.end();
    }
    
    
}

module.exports.compra = async (req, res) => {
    let obj = req.body;
    let titoli;

    if(obj._id  != undefined && obj.volumi) {
        titolo =await letturaDb("Es07", "borsa", {_id:obj._id}, {});
        if(parseInt(titolo[0].volumi) >= parseInt(obj.volumi) && parseInt(obj.volumi) >0) {
            let val = parseInt(titolo[0].volumi) - parseInt(obj.volumi);
            let ris = await updateTitolo(obj, val);
            if(ris == 1) {
                let ris = await inserisci("Es07", "storico", {user_id : req.session._id, titolo : obj._id, volumi: obj.volumi})
                if(ris.ok == 1) {
                    res.send("Aggiornato")
                    res.end();
                }
                else {
                    res.writeHead(400);
                    res.write("err");
                    res.end();
                }
                
            }
            else {
                res.writeHead(400);
                res.write("err");
                res.end();
            }
        }
        else {
            res.writeHead(400);
            res.write("Quantita insuf o non corretta");
            res.end();
        }
    }
    else {
        res.writeHead(400);
        res.write("Err");
        res.end();
    }
    
    
}


async function updateTitolo(obj ,val) {  
    return new Promise((resolve, reject) => {
        mongoClient.connect(url, { useUnifiedTopology: true }, function (err, connessione) {
            if (err)
                console.log(err)
            else {
    
                var database = connessione.db("Es07");
                obj.volumi  = parseInt(obj.volumi);
                database.collection("borsa").updateOne({_id:obj._id}, {"$set": { "volumi": val.toString() } }, function(err, risultato){
                    if(err)
                        resolve( 0);
                    else{
                        connessione.close();
                        resolve( 1);
                    }
                })
            }
        });
    });

    
}

async function inserisci(db, collection, json) {  
    return new Promise((resolve, reject) => {
        mongoClient.connect(url, function (err, dbs) {  
            if(err) {
                console.log(err)
            }
            else {
                let database = dbs.db(db)
                let array = [];
                if(json.length == undefined)
                    array[0] = json;
                else
                    array = json;
                database.collection(collection).insertMany(array, function (err, risultato) {  
                    let ris = {};
                    if(err) {
                        console.log("errore");
                        ris.ok = 0;
                    }
                    else {
                        ris.ok = 1;
                        ris.insertedIds = risultato.insertedIds;
                    }
                    dbs.close()
                    resolve(ris);
                })
            }
        })
    })
}

async function letturaDb(db, collection, query, select) {
    return new Promise((resolve, reject) => {
        let vet = [];
        mongoClient.connect(url, { useUnifiedTopology: true }, function (err, connessione) {
            if (err)
                console.log(err)
            else {
                var database = connessione.db(db);
                database.collection(collection).find(query).project(select).toArray(function (err, dati) {
                    connessione.close();
                    resolve(dati);
                });
            }
        });
    });
}

module.exports.logout= (req, res) => {
    req.session.destroy(function () {
        //res.writeHead(200, { "Content-Type": "application/json" });
        res.write("Logout corretto");
        res.end();
    });
}

//#endregion




